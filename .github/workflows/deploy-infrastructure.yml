name: Deploy-Infrastructure (Terraform)

on:
  workflow_call:
    inputs:
        environment:
          description: "Environment to deploy (dev/prod)"
          required: true
          type: string
    outputs:
      vm_ip:
        description: "Public IP of the VM"
        value: ${{ jobs.terraform.outputs.vm_ip }}
    secrets:
      AZURE_CREDENTIALS:
        required: true
      VM_SSH_KEY:
        required: true

jobs:
  terraform:
    name: Terraform Setup
    runs-on: ubuntu-latest
    outputs:
      vm_ip: ${{ steps.vm_ip.outputs.vm_ip }}
    defaults:
      run:
        working-directory: ./Terraform/${{ inputs.environment }}
    env:
      ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login (CLI)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Write SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Derive SSH Public Key
        id: ssh
        run: |
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          echo "ssh_public_key=$(cat ~/.ssh/id_rsa.pub)" >> "$GITHUB_OUTPUT"

      - name: Terraform Init
        run: |
          echo '## terraform init' >> deployment_log.md
          echo "Initializing Terraform..." >> deployment_log.md
          terraform init 2>&1 | tee -a deployment_log.md

      - name: Conditionally Import Resource Group
        run: |
          RG_NAME="${ENVIRONMENT}-rg"
          SUB_ID="${{ env.ARM_SUBSCRIPTION_ID }}"
          MODULE_PATH="module.resource_group.azurerm_resource_group.this"

          echo "Checking if resource group is already in Terraform state..."
          if terraform state list | grep -q "$MODULE_PATH"; then
            echo "Resource group already managed in Terraform state. Skipping import."
          else
            echo "Checking if resource group exists in Azure..."
            EXISTS=$(az group exists --resource-group "$RG_NAME")
            if [ "$EXISTS" == "true" ]; then
              echo "Resource group exists. Importing into Terraform state..."
              terraform import -input=false -lock=false \
                -var="ssh_public_key=${{ steps.ssh.outputs.ssh_public_key }}" \
                "$MODULE_PATH" "/subscriptions/$SUB_ID/resourceGroups/$RG_NAME"
            else
              echo "Resource group does not exist. Terraform will create it during apply."
            fi
          fi

      - name: Terraform Apply
        run: |
          echo '## terraform apply' >> deployment_log.md
          echo "Applying Terraform configuration..." >> deployment_log.md
          terraform apply -auto-approve \
            -var="ssh_public_key=${{ steps.ssh.outputs.ssh_public_key }}" 2>&1 | tee -a deployment_log.md

      - name: Terraform Output
        id: vm_ip
        run: |
          echo '## terraform output' >> deployment_log.md
          IP=$(terraform output -raw public_ip_address)
          echo "Public IP from Terraform: $IP" | tee -a deployment_log.md
          echo "vm_ip=$IP" >> $GITHUB_OUTPUT

      - name: Upload Terraform Deployment Log
        uses: actions/upload-artifact@v4
        with:
          name: terraform-deployment-log
          path: ./Terraform/deployment_log.md



          
